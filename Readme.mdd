#> 安装 node
#> 添加node环境变量
#> 添加一个 start 脚本来指引 node 去执行当前的 package  ,  package.json -> scripts -> "start": "electron ."
#> 安装 Electron,推荐的安装方法是把它作为您 app 中的开发依赖项，这使您可以在不同的 app 中使用不同的 Electron 版本  npm install --save-dev electron
#> 主进程文件 index.js (main.js) ; 写相应的代码逻辑； 也可以写在其他文件里，然后 require

#> 应用打包
#> 安装electron-prebuilt，它是一个npm模块，因此我们可以使用Npm来进行安装，它是一个electron的预编译版本  : npm install -g electron-prebuilt
#> 安装electron-packager ，它也是一个npm模块，是一个用于打包electron应用的工具 : npm install -g electron-packager

#> 打包
#> electron-packager 用法： electron-packager <应用目录> <应用名称> <打包平台> --out <输出目录> <架构> <应用版本>
#> 查看 electron-version 版本: 直接 electron
#> 改窗口左上角的图标和任务栏的图标，只需要在打包的命令上加个icon参数就好了
#> 1, electron-packager . Fedex --win --out ../Exe/Fedex --arch=x64 --version=0.0.1 (--electron-version=1.4.13 可以不指定版本用默认的) --icon=assets/app-icon/win/Iron_Man.ico
#> 2, 将上述打包命令卸载 package.json 中 : npm run-script package:win64

#> 效果：直接在当前项目目录的同级目录生成  HelloWorldApp 就是项目 app Chendaye666.exe


#> 分发

#> 准备
#> 使用NSIS来打包Electron安装程序
#> NSIS中文版下载地址：https://pan.baidu.com/s/1mitSQU0
#> 安装asar (参考官方文档https://www.w3cschool.cn/electronmanual/cexo1qkn.html)   npm install -g asar

#> 打包(https://blog.csdn.net/yu17310133443/article/details/79496499)
#> 在我们electron最初的项目目录下执行下面命令，生成asar包 ： asar pack ./index.html app.asar  -> 得到app.asar包
#> 将app.asar放到文章开始图片得到目录下的resources文件夹下(就是第一步打包生成的那个文件夹下的 resources文件夹)
#> 打开NSIS->选择可视化脚本编辑器->选择使用脚本向导创建新的脚本文件->下一步->设置应用名称，版本号，网址，标志随便自定义一个就好，然后下一步
#> 设置安装程序图标(图标必须是ico格式)，名称，语言（SimpChinese），界面，然后下一步
#> 授权文件有就填，没有就填空白   然后下一步
#> 添加应用程序文件，默认两个文件选中，删除
#> 添加HelloWorld.exe文件
#> 点击AddDirTree, 选择HelloWorld-win32-x64(第一次的打包文件夹)文件夹，选中包含子目录，确定，然后下一步
#> 可修改开始菜单名称，然后下一步
#> 可设置安装成功后启动的程序，默认就是我们打包后的启动程序，下一步
#> 设置一些卸载时界面的提示信息，然后下一步
#> 保存我们的脚本，完成，保存到桌面
#> 打开脚本文件，编译及运行 开始编译，请等待 编译完就可以安装啦

#> 安装本地模块（rebuild）
#>npm install --global --production windows-build-tools
#>npm install --save-dev electron-rebuild

#> Every time you run "npm install", run this
#>./node_modules/.bin/electron-rebuild

#> On Windows if you have trouble, try:
#>.\node_modules\.bin\electron-rebuild.cmd (--version=1.4.13 可以指定electron版本)

#> windows下安装python(管理员身份运行) https://github.com/nwjs/nw-gyp
#>npm install -g nw-gyp
#>npm install --global --production windows-build-tools
#>nw-gyp rebuild configure --target=0.29.1 --arch=x64   --python=C:\Users\chendaye666\.windows-build-tools\python27\python.exe
#>npm config set python C:\Users\chendaye666\.windows-build-tools\python27\python.exe
#>npm install printer --target_arch=x64 --python=C:\Users\chendaye666\.windows-build-tools\python27\python.exe

#>npm 不好用可以用 yarn (https://yarnpkg.com/zh-Hans/docs/install#windows-stable) (https://www.jianshu.com/p/f1d96bdc545b)

#> https://blog.csdn.net/github_36978270/article/details/78460696   vue-electron 项目模板
#_________________________________________________________________________________________________
项目目录：
  assets ：图片 样式等静态资源 jssss
  main-process : 主进程目录（每一个项目分一个文件夹）
  renderer-process: 渲染进程，与主进程相对应
  sections : 放置要渲染的视图，目录结构与渲染进程对应
  script : 放置项目命令脚本
